!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BOOL	MatrixReal.pm	/^    BOOL:$/;"	l
BaumWelch	Hmm.pm	/^sub BaumWelch{$/;"	s
Bias	lu.pl	/^sub Bias{$/;"	s
EQUAL	MatrixReal.pm	/^        EQUAL:$/;"	l
Hmm	Hmm.pm	/^package Hmm; $/;"	p
LU	lu.pl	/^sub LU{$/;"	s
Math::MatrixReal	MatrixReal.pm	/^package Math::MatrixReal;$/;"	p
NONZERO	MatrixReal.pm	/^    NONZERO:$/;"	l
NOTBOOL	MatrixReal.pm	/^    NOTBOOL:$/;"	l
NOTEQUAL	MatrixReal.pm	/^        NOTEQUAL:$/;"	l
OUTER	MatrixReal.pm	/^        OUTER:$/;"	l
STDOUT	MatrixReal.pm	/^        format => "%s",$/;"	f
Usage	run_hmm_all_v4.pl	/^Usage:$/;"	l
ZERO	MatrixReal.pm	/^    ZERO:$/;"	l
_add	MatrixReal.pm	/^sub _add$/;"	s
_assign_add	MatrixReal.pm	/^sub _assign_add$/;"	s
_assign_exponent	MatrixReal.pm	/^sub _assign_exponent {$/;"	s
_assign_multiply	MatrixReal.pm	/^sub _assign_multiply$/;"	s
_assign_subtract	MatrixReal.pm	/^sub _assign_subtract$/;"	s
_boolean	MatrixReal.pm	/^sub _boolean$/;"	s
_clone	MatrixReal.pm	/^sub _clone$/;"	s
_concat	MatrixReal.pm	/^sub _concat$/;"	s
_count_zeroes_row	MatrixReal.pm	/^sub _count_zeroes_row {$/;"	s
_divide	MatrixReal.pm	/^sub _divide$/;"	s
_equal	MatrixReal.pm	/^sub _equal$/;"	s
_exponent	MatrixReal.pm	/^sub _exponent $/;"	s
_greater_than	MatrixReal.pm	/^sub _greater_than$/;"	s
_greater_than_or_equal	MatrixReal.pm	/^sub _greater_than_or_equal$/;"	s
_householder_values	MatrixReal.pm	/^sub _householder_values ($)$/;"	s
_householder_vectors	MatrixReal.pm	/^sub _householder_vectors ($)$/;"	s
_init_iteration	MatrixReal.pm	/^sub _init_iteration$/;"	s
_less_than	MatrixReal.pm	/^sub _less_than$/;"	s
_less_than_or_equal	MatrixReal.pm	/^sub _less_than_or_equal$/;"	s
_multiply	MatrixReal.pm	/^sub _multiply$/;"	s
_negate	MatrixReal.pm	/^sub _negate$/;"	s
_new_from_rows_or_cols	MatrixReal.pm	/^sub _new_from_rows_or_cols {$/;"	s
_norm	MatrixReal.pm	/^sub _norm$/;"	s
_normalize_row	MatrixReal.pm	/^sub _normalize_row {$/;"	s
_not_boolean	MatrixReal.pm	/^sub _not_boolean$/;"	s
_not_equal	MatrixReal.pm	/^sub _not_equal$/;"	s
_pythag	MatrixReal.pm	/^sub _pythag ($$)$/;"	s
_stringify	MatrixReal.pm	/^sub _stringify$/;"	s
_subtract	MatrixReal.pm	/^sub _subtract$/;"	s
_transpose	MatrixReal.pm	/^sub _transpose$/;"	s
_tridiagonal_QLimplicit	MatrixReal.pm	/^sub _tridiagonal_QLimplicit$/;"	s
_tridiagonal_QLimplicit_values	MatrixReal.pm	/^sub _tridiagonal_QLimplicit_values$/;"	s
_undo_LR	MatrixReal.pm	/^sub _undo_LR$/;"	s
add	MatrixReal.pm	/^sub add$/;"	s
adjoint	MatrixReal.pm	/^sub adjoint {$/;"	s
as_latex	MatrixReal.pm	/^sub as_latex{$/;"	s
as_matlab	MatrixReal.pm	/^sub as_matlab {$/;"	s
as_scilab	MatrixReal.pm	/^sub as_scilab {$/;"	s
as_yacas	MatrixReal.pm	/^sub as_yacas{$/;"	s
assign	MatrixReal.pm	/^sub assign$/;"	s
assign_row	MatrixReal.pm	/^sub assign_row {$/;"	s
backward	Hmm.pm	/^sub backward{$/;"	s
clone	MatrixReal.pm	/^sub clone$/;"	s
cofactor	MatrixReal.pm	/^sub cofactor {$/;"	s
col	MatrixReal.pm	/^sub col{ return (shift)->column(shift) }$/;"	s
column	MatrixReal.pm	/^sub column$/;"	s
condition	MatrixReal.pm	/^sub condition$/;"	s
copy	MatrixReal.pm	/^sub copy$/;"	s
decompose_LR	MatrixReal.pm	/^sub decompose_LR$/;"	s
det	MatrixReal.pm	/^sub det {$/;"	s
det_LR	MatrixReal.pm	/^sub det_LR  #  determinant of LR decomposition matrix$/;"	s
dim	MatrixReal.pm	/^sub dim  #  returns dimensions of a matrix$/;"	s
display_precision	MatrixReal.pm	/^sub display_precision $/;"	s
each	MatrixReal.pm	/^sub each {$/;"	s
each_diag	MatrixReal.pm	/^sub each_diag { $/;"	s
eigenvalues	MatrixReal.pm	/^sub eigenvalues ($){$/;"	s
element	MatrixReal.pm	/^sub element$/;"	s
exponent	MatrixReal.pm	/^sub exponent {       $/;"	s
forward	Hmm.pm	/^sub forward{$/;"	s
householder	MatrixReal.pm	/^sub householder ($)$/;"	s
householder_tridiagonal	MatrixReal.pm	/^sub householder_tridiagonal ($)$/;"	s
inverse	MatrixReal.pm	/^sub inverse {$/;"	s
invert_LR	MatrixReal.pm	/^sub invert_LR$/;"	s
is_LR	MatrixReal.pm	/^sub is_LR($) {$/;"	s
is_binary	MatrixReal.pm	/^sub is_binary{$/;"	s
is_col	MatrixReal.pm	/^sub is_col { return (shift)->is_col_vector }$/;"	s
is_col_vector	MatrixReal.pm	/^sub is_col_vector {$/;"	s
is_diagonal	MatrixReal.pm	/^sub is_diagonal ($) {$/;"	s
is_gramian	MatrixReal.pm	/^sub is_gramian{$/;"	s
is_idempotent	MatrixReal.pm	/^sub is_idempotent($) {$/;"	s
is_lower_triangular	MatrixReal.pm	/^sub is_lower_triangular {$/;"	s
is_negative	MatrixReal.pm	/^sub is_negative($) {$/;"	s
is_normal	MatrixReal.pm	/^sub is_normal{$/;"	s
is_orthogonal	MatrixReal.pm	/^sub is_orthogonal($) {$/;"	s
is_periodic	MatrixReal.pm	/^sub is_periodic($$) {$/;"	s
is_positive	MatrixReal.pm	/^sub is_positive($) {$/;"	s
is_positive_definite	MatrixReal.pm	/^sub is_positive_definite {$/;"	s
is_positive_semidefinite	MatrixReal.pm	/^sub is_positive_semidefinite {$/;"	s
is_quadratic	MatrixReal.pm	/^sub is_quadratic ($) {$/;"	s
is_row	MatrixReal.pm	/^sub is_row { return (shift)->is_row_vector }$/;"	s
is_row_vector	MatrixReal.pm	/^sub is_row_vector {$/;"	s
is_skew_symmetric	MatrixReal.pm	/^sub is_skew_symmetric{$/;"	s
is_square	MatrixReal.pm	/^sub is_square($) {$/;"	s
is_symmetric	MatrixReal.pm	/^sub is_symmetric ($)$/;"	s
is_tridiagonal	MatrixReal.pm	/^sub is_tridiagonal ($) {$/;"	s
is_upper_triangular	MatrixReal.pm	/^sub is_upper_triangular {$/;"	s
kleene	MatrixReal.pm	/^sub kleene$/;"	s
length	MatrixReal.pm	/^sub length$/;"	s
max	MatrixReal.pm	/^sub max$/;"	s
min	MatrixReal.pm	/^sub min$/;"	s
minor	MatrixReal.pm	/^sub minor {$/;"	s
multiply	MatrixReal.pm	/^sub multiply$/;"	s
multiply_scalar	MatrixReal.pm	/^sub multiply_scalar$/;"	s
negate	MatrixReal.pm	/^sub negate$/;"	s
new	Hmm.pm	/^sub new{    $/;"	s
new	MatrixReal.pm	/^sub new$/;"	s
new_diag	MatrixReal.pm	/^sub new_diag {$/;"	s
new_from_cols	MatrixReal.pm	/^sub new_from_cols { $/;"	s
new_from_columns	MatrixReal.pm	/^sub new_from_columns {$/;"	s
new_from_rows	MatrixReal.pm	/^sub new_from_rows {$/;"	s
new_from_string	MatrixReal.pm	/^sub new_from_string#{{{$/;"	s
new_random	MatrixReal.pm	/^sub new_random { $/;"	s
new_tridiag	MatrixReal.pm	/^sub new_tridiag {$/;"	s
norm_frobenius	MatrixReal.pm	/^sub norm_frobenius {$/;"	s
norm_max	MatrixReal.pm	/^sub norm_max  #  maximum of sums of each row$/;"	s
norm_one	MatrixReal.pm	/^sub norm_one  #  maximum of sums of each column$/;"	s
norm_p	MatrixReal.pm	/^sub norm_p {$/;"	s
norm_sum	MatrixReal.pm	/^sub norm_sum {$/;"	s
normalize	MatrixReal.pm	/^sub normalize$/;"	s
one	MatrixReal.pm	/^sub one$/;"	s
order_LR	MatrixReal.pm	/^sub order_LR  #  order of LR decomposition matrix (number of non-zero equations)$/;"	s
rank_LR	MatrixReal.pm	/^sub rank_LR {$/;"	s
row	MatrixReal.pm	/^sub row$/;"	s
scalar_product	MatrixReal.pm	/^sub scalar_product$/;"	s
shadow	MatrixReal.pm	/^sub shadow$/;"	s
simu	Hmm.pm	/^sub simu{	           $/;"	s
solve_GSM	MatrixReal.pm	/^sub solve_GSM  #  Global Step Method$/;"	s
solve_LR	MatrixReal.pm	/^sub solve_LR$/;"	s
solve_RM	MatrixReal.pm	/^sub solve_RM  #  Relaxation Method$/;"	s
solve_SSM	MatrixReal.pm	/^sub solve_SSM  #  Single Step Method$/;"	s
spectral_radius	MatrixReal.pm	/^sub spectral_radius $/;"	s
submatrix	MatrixReal.pm	/^sub submatrix {$/;"	s
subtract	MatrixReal.pm	/^sub subtract$/;"	s
swap_col	MatrixReal.pm	/^sub swap_col {$/;"	s
swap_row	MatrixReal.pm	/^sub swap_row {$/;"	s
sym_diagonalize	MatrixReal.pm	/^sub sym_diagonalize ($)$/;"	s
sym_eigenvalues	MatrixReal.pm	/^sub sym_eigenvalues ($)$/;"	s
trace	MatrixReal.pm	/^sub trace {$/;"	s
transpose	MatrixReal.pm	/^sub transpose {$/;"	s
tri_diagonalize	MatrixReal.pm	/^sub tri_diagonalize ($;$)$/;"	s
tri_eigenvalues	MatrixReal.pm	/^sub tri_eigenvalues ($;$)$/;"	s
vector_product	MatrixReal.pm	/^sub vector_product$/;"	s
viterbi	Hmm.pm	/^sub viterbi{$/;"	s
zero	MatrixReal.pm	/^sub zero$/;"	s
